{"version":3,"sources":["../src/datasource.js"],"names":["_","$","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","window","options","targets","length","target","data","timeScope","xpointFuncs","allXPointFunc","self","queries","map","xpointFunc","paramData","from","to","func","params","format","token","param","datasourceRequest","method","headers","Promise","all","then","rs","r","response","status","message","title","d","text","value","filter","hide","timeRange","angular","element","injector","get","toDate","getTime","split","funName","p","startsWith","variable","variables","find","f","current"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\nimport $ from 'jquery';\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    window[\"XPOINT_TOKEN\"] = 'test_token_201_11';\n  }\n\n  // Called once per panel (graph)\n  query(options) {\n\n    if(!options\n      || !options.targets\n      || options.targets.length < 1\n      || !options.targets[0].target){\n      return {data: []};\n    }\n\n    let timeScope = this.timeScope();\n    let xpointFuncs = this.allXPointFunc(options.targets);\n\n    let self = this;\n    let queries = _.map(xpointFuncs, function (xpointFunc) {\n      var paramData = {};\n      paramData.from = timeScope.from;\n      paramData.to = timeScope.to;\n      paramData.func = xpointFunc.func;\n      paramData[\"fun-param\"] = xpointFunc.params;\n      paramData.format = xpointFunc.format;\n      paramData.token =  window[\"XPOINT_TOKEN\"];\n      let param =  $.param(paramData, true);\n      return  self.backendSrv.datasourceRequest({\n        url: self.url + '/json?' + param,\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' }\n      })\n    });\n\n    return Promise.all(queries).then(function (rs) {\n      return {\n        data: _.map(rs, function (r) {\n          return r.data;\n        })\n      }\n    });\n  }\n\n  // Required\n  // Used for testing datasource in datasource configuration pange\n  testDatasource() {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/test',\n      method: 'GET'\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n\n\n  annotationQuery(options) {\n\n  }\n\n  // Optional\n  // Required for templating\n  metricFindQuery(options) {\n\n    if(!options || options.length < 1){\n      return {data: []};\n    }\n\n    var paramData = {};\n\n    let timeScope = this.timeScope();\n    let xpointFunc = this.xpointFunc(options);\n\n    paramData.from = timeScope.from;\n    paramData.to = timeScope.to;\n    paramData.func = xpointFunc.func;\n    paramData[\"fun-param\"] = xpointFunc.params;\n    paramData.format = xpointFunc.format;\n    paramData.token =  window[\"XPOINT_TOKEN\"];\n\n    let param =  $.param(paramData, true);\n\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/template?' + param,\n      method: 'GET',\n      headers: { 'Content-Type': 'application/json' }\n    }).then(function (rs) {\n      return _.map(rs.data, function (d) {\n        return { text: d[0], value : d[1]}\n      })\n    });\n  }\n\n  allXPointFunc(targets) {\n\n    let self = this;\n\n    targets = _.filter(targets, target => {\n      return target.target !== '' && !target.hide;\n    });\n\n    return _.map(targets, target => self.xpointFunc(target.target));\n  }\n\n  timeScope(){\n    let timeRange = angular.element('grafana-app').injector().get('timeSrv').timeRange();\n    return {\n      from: timeRange.from.toDate().getTime(),\n      to: timeRange.to.toDate().getTime()\n    }\n  }\n\n  xpointFunc(target){\n    if(!target || target.length < 2){\n      throw \"Target is not Valid\";\n    }\n\n    target = target.split(':');\n\n    if(target.length < 1){\n      throw \"Target is not Valid\";\n    }\n    \n    let funName = target[0];\n    \n    var params = [];\n    var format = \"\";\n\n    if(target.length > 1) {\n      params = target[1].split('|')[0].split(',');\n      if(target[1].split('|').length > 1){\n        format = target[1].split('|')[1];\n      }\n    }\n\n    let self = this;\n\n    params = _.map(params, function (p) {\n      if(p.startsWith('$')){\n        let variable = self.templateSrv.variables.find(function (f) {\n          return '$' + f.name == p;\n        });\n        if(variable){\n          return variable.current.value;\n        }else{\n          return \"\";\n        }\n      }else{\n        return p;\n      }\n    });\n\n    return {\n      func: funName,\n      params: params,\n      format: format\n    }\n  }\n}\n"]}